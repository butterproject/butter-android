import si.kamino.gradle.extensions.version.code.IncreaseVersionCode

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath "gradle.plugin.si.kamino.gradle:android-version:1.2.2"
        classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.1'
    }
}

ext {
    appCompatVersion = "25.3.1"
    buildToolsVersion = "25.0.0"
    targetSdk = 25
    compileSdk = 25
    minSdk = 16
    butterknifeVersion = "8.5.1"
    okHttpVersion = "3.4.2"
    daggerVersion = "2.9"
    javaxAnnotationVersion = "1.2"
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'http://guardian.github.com/maven/repo-releases' }
        mavenLocal()
    }

    //let project evaluate its script first
    project.afterEvaluate {
        //only apply to projects that have the android plugin
        if (project.plugins.hasPlugin('com.android.application')) {
            //global android setting
            project.android {
                packagingOptions {
                    pickFirst '**/libjlibtorrent.so'
                    exclude 'META-INF/beans.xml'
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/DEPENDENCIES.txt'
                }

                applicationVariants.all { variant ->
                    //rename output files
                    renameOutputFiles(variant)
                }

                adbOptions {
                    timeOutInMs 10 * 60 * 1000  // 10 minutes
                }

                dexOptions {
                    javaMaxHeapSize "512M"
                }
            }

            project.androidVersion {
                appVersion {
                    versionCode {
                        digits 2
                    }
                }

                splits {
                    abi {
                        armeabi {
                            versionCode(IncreaseVersionCode) {
                                add 1000000
                            }
                        }

                        "armeabi-v7a" {
                            versionCode(IncreaseVersionCode) {
                                add 2000000
                            }
                        }

                        "arm64-v8a" {
                            versionCode(IncreaseVersionCode) {
                                add 3000000
                            }
                        }

                        x86 {
                            versionCode(IncreaseVersionCode) {
                                add 4000000
                            }
                        }

                        x86_64 {
                            versionCode(IncreaseVersionCode) {
                                add 5000000
                            }
                        }
                    }
                }
            }
        }
    }
}

static def renameOutputFiles(variant) {
    variant.outputs.each { output ->
        def alignedOutputFile = output.outputFile
        def unalignedOutputFile = output.packageApplication.outputFile
        def outputFileName = alignedOutputFile.name

        // Customise APK filenames
        if (outputFileName.contains("debug")) {
            outputFileName = outputFileName.replace("debug", "development").replace(".apk", "-" + (System.getenv("BUILD_NUMBER") ?: "local") + ".apk")
        } else {
            outputFileName = outputFileName.replace(".apk", "-" + variant.versionName + ".apk")
        }

        if (variant.buildType.zipAlignEnabled) {
            // normal APK
            output.outputFile = new File(alignedOutputFile.parent, outputFileName)
        }
        // 'unaligned' APK
        output.packageApplication.outputFile = new File(unalignedOutputFile.parent, outputFileName.replace(".apk", "-unaligned.apk"))
    }
}
